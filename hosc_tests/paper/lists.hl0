list $a :: Nil | Cons $a (list $a);

map (compose a b)

where

map = %f {
  %list {
    case list of {
      Nil : Nil;
      Cons x xs : Cons (f x) (map f xs);
    }
  } 
}

compose = %f {%g { %x { f (g x)}}}

unit = %x {Cons x Nil}

join = %x { %xs {
	case xs of {
		Nil: x;
		Cons x1 xs1: case x of {Nil: join x1 xs1; Cons x2 xs2 : Cons x2 (join xs2 xs);};
	}
}}

append = %xs {
  %ys {
    case xs of {
      Nil : ys;
      Cons x1 xs1 : Cons x1 (append xs1 ys);
    }
  }
}
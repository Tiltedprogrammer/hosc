list $a :: Nil | Cons $a (list $a);

(compose (map f1) (map f2)) x 

where

map = %f { %list {
    case list of {
      Nil : Nil;
      Cons x xs : Cons (f x) (map f xs);
    }
}}

compose = %f {%g { %x { f (g x)}}}

unit = %x {Cons x Nil}

join = %xs {
    case xs of {
        Nil: Nil;
        Cons x1 xs1: append x1 (join xs1);
    }
}

append = %xs { %ys {
    case xs of {
      Nil : ys;
      Cons x1 xs1 : Cons x1 (append xs1 ys);
    }
}}
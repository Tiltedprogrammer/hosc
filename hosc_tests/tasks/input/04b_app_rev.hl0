list $a :: Nil | Cons $a (list $a);

case  ((app (rev v10)) (Cons v9 Nil))  of { Cons v3 v4 : (Cons v3 ((app v4) (rev y))); Nil  : (rev y); } //b-node equals via supercompilation to a-node // not true

/*
case  ((app (rev ((app v130) x))) (Cons v129 Nil))  of {
  Cons v19 v20 : (Cons v19 ((app v20) (Cons v8 Nil)));
  Nil  : (Cons v8 Nil);
}
*/

//rev (app y x) //!

//app (rev xs) (rev (Cons y Nil))

//app (rev xs) (Cons x Nil)

where

rev = %xs {
  case xs of {
    Nil : Nil;
    Cons z  zs : app (rev zs) (Cons z Nil);
  }
}

app = %xs {
  %ys {
    case xs of {
      Nil : ys;
      Cons z zs : Cons z (app zs ys);
    }
  }
}
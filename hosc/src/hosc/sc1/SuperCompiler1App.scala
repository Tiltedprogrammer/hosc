package hosc.sc1

import java.io.{File, FileWriter}
import scala.xml.XML

import InputUtil1._

object SuperCompiler1App {
  val help = """usage: hosc.SuperCompiler1App -i input_file -t tree_output_file -p program_output_file
  |Where:
  |input_file            path to input file where code is written HL1 language syntax
  |tree_output_file      path to file where process tree will be placed (in SVG format)
  |program_output_file   path to file where residual program will be placed
  |""".stripMargin
  def main(args : Array[String]) : Unit = {
    var fileName: String = null
    var outFileName: String = null
    var outProgramFileName: String = null
    
    args.toList match {
      case "-i" :: input_file :: "-t" :: output_file :: "-p" :: output_file_1 :: Nil =>
        fileName = input_file
        outFileName = output_file
        outProgramFileName = output_file_1
      case "-help" :: Nil => 
        println(help)
        return
      case _ => 
        throw new IllegalArgumentException("run spcs.SuperCompiler1App -help for help")       
    }
    
    val inProgram = program1FromFile(fileName)
    val sc = new SuperCompiler1(inProgram, new Vars1Util())
    val (tree, resProgram) = sc.superCompile()    
    val svg = new ProcessTree1SVG(tree).treeToSVG
    
    val svgFile = new File(outFileName)
    if (!svgFile.exists){
      svgFile.createNewFile()
    } 
    XML.save(outFileName, svg)
    
    val doc = resProgram.toDoc
    val slFile = new File(outProgramFileName)
    if (!slFile.exists){
      slFile.createNewFile()
    }
    val fw = new FileWriter(slFile);
    fw.write("// generated by SC1 from " + fileName + "\n")
    doc.format(100, fw)
    fw.flush();
    fw.close(); 
  }
}